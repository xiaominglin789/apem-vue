{"version":3,"file":"reactivity.esm-bundler.js","sources":["../../shared/src/index.ts","../src/enum.ts","../src/effect.ts","../src/base-handler.ts","../src/reactive.ts","../src/ref.ts"],"sourcesContent":["/** 共享模块-通用方法集合 */\n\n/**\n * 判断 是否为对象类型\n * @param target \n * @returns true: 是对象类型,  false: 非对象类型\n */\nfunction isObject(target: any): boolean {\n  return typeof target == \"object\" && target !== null;\n}\n\n/**\n * 判断 是不是数组类型\n * @param target \n * @returns true: 数组类型,  false: 非数组类型\n */\nfunction isArray(target: any): boolean {\n  return Array.isArray(target);\n}\n\n/**\n * 判断 是不是函数类型\n * @param target \n * @returns true: 函数类型,  false: 非函数类型\n */\nfunction isFunction(target: any): boolean {\n  return typeof target == \"function\";\n}\n\n/**\n * 判断 是不是数字类型\n * @param target \n * @returns true: 数字类型,  false: 非数字类型\n */\n function isNumber(target: any): boolean {\n  return typeof target == \"number\";\n}\n\n/**\n * 判断 是不是字符串类型\n * @param target \n * @returns true: 字符串类型,  false: 非字符串类型\n */\n function isString(target: any): boolean {\n  return typeof target == \"string\";\n}\n\n/**\n * 判断 是不是整形数字类型\n * @param target \n * @returns true: 整形数字类型,  false: 非 整形数字类型\n */\nfunction isInteger(target: any): boolean {\n  return parseInt(target) + \"\" === target;\n}\n\n/**\n * target 是否有 key 这个属性\n * @param target \n * @param key key键的属性\n * @returns \n */\nfunction hasOwnKey(target, key) {\n  return Object.prototype.hasOwnProperty.call(target, key);\n}\n\n/**\n * 2值比较是否相等\n * @param valA \n * @param valB \n * @returns true: 值一样的， false: 值不一样\n */\nfunction  compareValue(valA, valB) {\n  if (!valA || !valB) {\n    return false;\n  }\n\n  return valB === valA;\n}\n\nexport {\n  isObject,\n  isArray,\n  isFunction,\n  isNumber,\n  isString,\n  isInteger,\n  hasOwnKey,\n  compareValue\n};\n","/** 依赖收集的操作标识枚举 */\nexport enum TrackOpsEnum {\n  /** 取值 */\n  GET,\n}\n\n/** 触发标记枚举 */\nexport enum TriggerOpsEnum {\n  /** 添加 */\n  ADD,\n  /** 修改 */\n  SET\n}\n","import { isArray } from \"@vue/shared/src\";\nimport { TrackOpsEnum, TriggerOpsEnum } from \"./enum\";\n\n/** effect序号标识 */\nlet effectID = 0;\n/** 当前的effect */\nlet activeEffect;\n/** effect存储栈 */\nconst effectStack: Array<Function> = [];\n/** 对象-属性-effects 依赖映射表 */\nconst targetEffectMap: WeakMap<object, Map<string, Set<Function>>> = new WeakMap();\n\n/**\n * 副作用\n * 作用: 可响应的effect, 数据变化时重新执行\n * @param fn 函数\n * @param options 配置对象:key-value\n */\nexport function effect(fn: Function, options: any) {\n  // 数据变化，重新执行\n  const eff = createReactiveEffect(fn, options);\n\n  if (!options?.lazy) {\n    // 默认先执行一次\n    eff();\n  }\n\n  return eff;\n}\n\n/** 创建可响应的efflect函数 - 闭包 */\nfunction createReactiveEffect(fn: Function, options: any)  {\n\n  const effect = function reactiveEffect() {\n    // 函数执行, 会取值, 会执行 reactive的get 关联-依赖收集\n    if (!effectStack.includes(effect)) {\n      try {\n        effectStack.push(effect);\n        activeEffect = effect;\n        return fn();\n      } finally {\n        // 遇到嵌套effect函数时，保证 activeEffect 正确指向\n        effectStack.pop();\n        activeEffect = effectStack[effectStack.length - 1];\n      }\n    }\n  }\n\n  // 当前effect的id标识\n  effect.id = effectID++;\n  // 标记为 响应式的effect\n  effect._isEffect = true;\n  // effect-对应的原函数\n  effect.raw = fn;\n  // effect-属性配置\n  effect.options = options;\n\n  return effect;\n}\n\n/** 清除依赖收集 */\nfunction cleanup() {}\n\n/**\n * 收集器 依赖收集函数\n * 让 某个对象的属性,收集其当前对应的effect函数。\n * @param target 目标对象\n * @param trackOpType 操作标识\n * @param key 对象的属性\n */\nexport function track(target: object, trackOpType: TrackOpsEnum, key: string) {\n  if (activeEffect === undefined) {\n    return;\n  }\n\n  let depsMap = targetEffectMap.get(target);\n  if (!depsMap) {\n    targetEffectMap.set(target, (depsMap = new Map))\n  }\n\n  let dep = depsMap.get(key);\n  if (!dep) {\n    depsMap.set(key, (dep = new Set));\n  }\n\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect);\n  }\n}\n\n/**\n * 触发器 effect->通知->视图更新\n * @param target 目标对象\n * @param TriggerOpsEnum 触发的类型:SET / ADD\n * @param key 哪个键\n * @param newValue 新值\n * @param oldValue 旧值\n */\nexport function trigger(target: object, triggerOpsEnum: TriggerOpsEnum, key?: string, newValue?: any, oldValue?: any) {\n  // 取出-当前目标对应的effects\n  const depsMap = targetEffectMap.get(target);\n  if (!depsMap) {\n    // 该对象无依赖, 后续不操作\n    return;\n  }\n\n  /** 收集将要操作的effect-事件, 最后才去执行。 */\n  const waitRunEffects = new Set<Function>();\n  /** 收集将要操作的effect-事件, 最后才去执行。 */\n  const addToWaitRunEffects = (effs: Set<Function>) => {\n    if (effs) {\n      effs.forEach((eff: Function) => waitRunEffects.add(eff));\n    }\n  }\n\n  if (key === \"length\"  && isArray(target)) {\n    // 查看是否修改的是数组的长度, 特殊处理:\n    depsMap.forEach((dep, key) => {\n      // 如果是直接修改的length属性 或者 旧的长度 > 新的长度时,将`length`依赖存入起来\n      // key 来至于 Map内， Symbol(Symbol.toPrimitive) 类型，String包装再和value隐式比较\n      if (String(key) === \"length\" || String(key) > newValue) {\n        addToWaitRunEffects(dep);\n      }\n    });\n  } else {\n    // 普通key对象\n    if (key !== undefined) {\n      addToWaitRunEffects(depsMap.get(key));\n    }\n    // 数组 特殊处理: 是数组 且 添加 的操作，长度改变\n    switch (triggerOpsEnum) {\n      case TriggerOpsEnum.ADD:\n        if (isArray(target)) {\n          addToWaitRunEffects(depsMap.get(\"length\"));\n        }\n        break;\n    }\n  }\n\n  // 执行依赖收集的函数\n  waitRunEffects.forEach((eff:Function) => {\n    eff();\n  });\n}\n","import { compareValue, hasOwnKey, isArray, isInteger, isObject } from \"@vue/shared\";\nimport { readonly, reactive } from \"./reactive\";\nimport { TrackOpsEnum, TriggerOpsEnum } from \"./enum\";\nimport { track, trigger } from \"./effect\";\n/**\n * getter读取\n * @param isReadonly 是否为仅读, true: readonly仅读, false: 响应式proxy\n * @param isShollaw 是否为仅作用于第一层, true: 仅作用于第一层， false: 全部嵌套属性都仅读或响应式\n * @returns \n */\nfunction createGetter(isReadonly=false, isShollaw=false) {\n  return function get(target: object, key: string, receiver?: any) {\n    // 从反射中取值\n    const result = Reflect.get(target, key, receiver);\n\n    if (!isReadonly) {\n      // 只读的对象不做依赖收集\n      // 响应式对象-才作依赖收集\n      // 取值时, 去 执行 tract 收集 effect\n      // v3 effect =取代了=>  v2 watcher\n      track(target, TrackOpsEnum.GET, key);\n    }\n\n    if (isShollaw) {\n      // 只有第一层是响应式属性\n      return result;\n    } \n    \n    if (isObject(result)) {\n      // 当取值时才进行代理\n      // 判断对象类型，只读属性，递归包装\n      return isReadonly ? readonly(result) : reactive(result);\n    }\n    \n    return result;\n  }\n}\n\n/**\n * setter写入(只有响应式数据才能修改)\n * @param isShollaw 是否为仅作用于第一层, true: 仅作用于第一层， false: 全部嵌套属性都响应式\n * 注意点:\n * 1.target push / pop 等修改了数组长度的操作 都会触发2次set. \n *    因为第一次是下标索引值的改变,\n *    第二次是length属性的改变, 但是 。\n * 2.如果是外部直接修改数组的length属性, 执行 trigger\n */\nfunction createSetter(isShollaw=false) {\n  return function set(target: object, key: string, newValue: any, receiver?: any) {\n    const oldValue = target[key];\n    // 是不是数组, 判断key(下标)是不是比原数组长度小:  小-> set 修改操作, 大 添加新元素的操作\n    //   不是数值型数组, 则为 对象类型。判断 key是不是对象商的属性。是 -> 修改操作， 否 添加新属性的操作。\n    let hasKey = (isArray(target) && isInteger(key)) ? \n                  (Number(key) < target['length']) : hasOwnKey(target, key);\n    \n    // 反射 - 修改新值\n    const result = Reflect.set(target, key, newValue, receiver);                  \n\n    // 根据 类型判断的操作 调用 触发器\n    if (!hasKey) {\n      // 添加操作 - 通知effect trigger操作\n      trigger(target, TriggerOpsEnum.ADD, key, newValue);\n    } else if (!compareValue(oldValue, newValue)) {\n      // 值不同,才去改 - 通知effect trigger操作\n      trigger(target, TriggerOpsEnum.SET, key, newValue, oldValue);\n    }\n    \n    // 返回修改的结果 true/false\n    return result;\n  }\n}\n\n\n/** 响应式对象-get */\nconst get = createGetter(false, false);\n/** 仅第一层响应式对象-get */\nconst shollawReactiveGetter = createGetter(false, true);\n/** 全部属性仅读对象-get */\nconst readonlyGetter = createGetter(true, false);\n/** 仅第一层只读对象-get */\nconst shollawReadonlyGetter = createGetter(true, true);\n/** 响应式对象-set */\nconst set = createSetter(false);\n/** 仅第一层响应式对象-set */\nconst shollawReactiveSetter = createSetter(true);\n\n\n/** reactive包装-get/set处理 */\nconst handleReactive = {\n  get,\n  set,\n}\n\n/** shallowReactive包装-get/set处理 */\nconst handleShollawReactive = {\n  get: shollawReactiveGetter,\n  set: shollawReactiveSetter\n}\n\n/** readonly包装-get/set处理 */\nconst handleReadonly = {\n  get: readonlyGetter,\n  set: (target: object, key: string) => {\n    console.warn(target, \" 所有属性都是只读,\" + key + \" 无法修改\");\n    return false;\n  }\n}\n\n/** shallowReadonly包装-get/set处理 */\nconst handleShollawReadonly = {\n  get: shollawReadonlyGetter,\n  set: (target: object, key: string) => {\n    console.warn(target, \" 的属性:\", key, \" 属性是只读的, 无法修改\");\n    return false;\n  }\n}\n\nexport {\n  handleReactive,\n  handleShollawReactive,\n  handleReadonly,\n  handleShollawReadonly,\n}\n","import { isObject } from \"@vue/shared/src\";\nimport {\n  handleReactive,\n  handleShollawReactive,\n  handleReadonly,\n  handleShollawReadonly,\n} from \"./base-handler\";\n\n/** 响应式数据-代理对象map */\nconst reactiveProxyMap = new WeakMap();\n/** 只读数据-代理对象map */\nconst readonlyProxyMap = new WeakMap();\n\n/**\n * 根据配置创建代理对象\n * @param target 数据源\n * @param isReadonly 是否仅读\n * @param handle get/set-处理配置项\n */\nfunction createReactiveObject(target: any, isReadonly: boolean, handle: ProxyHandler<object>) {\n  /**\n   * 1.数据源是不是对象类型, 非对象的数据源直接返回\n   * 2.数据源是否已被代理过了,有代理则直接返回代理的数据\n   *   - 数据源是不是只读的, 取到对应的数据缓存\n   *   - 没有缓存,则存入缓存中、\n   */\n  if (!isObject(target)) {\n    return target;\n  }\n\n  const proxyMap = isReadonly ? readonlyProxyMap : reactiveProxyMap;\n\n  if (proxyMap.has(target)) {\n    // 有缓存, 返回缓存\n    return proxyMap.get(target);\n  }\n\n  // 无缓存, 新建, 先存缓存\n  const targetProxy = new Proxy<object>(target, handle);\n  proxyMap.set(target, targetProxy);\n\n  return targetProxy;\n}\n\n\n/** reactive包装: 所有深度的属性都被包装成proxy */\nfunction reactive(data: any) {\n  return createReactiveObject(data, false, handleReactive);\n}\n\n/** shallowReactive包装: 只有第一层属性会被包装成proxy,其他层不会 */\nfunction shallowReactive(data: any) {\n  return createReactiveObject(data, false, handleShollawReactive);\n}\n\n/** readonly包装: 所有属性都是只读,不能改 */\nfunction readonly(data: any) {\n  return createReactiveObject(data, true, handleReadonly);\n}\n\n/**\n * shallowReadonly包装: 只有第一层属性是只读的,其他层的可读可改\n */\nfunction shallowReadonly(data: any) {\n  return createReactiveObject(data, true, handleShollawReadonly);\n}\n\nexport {\n  reactive,\n  shallowReactive,\n  readonly,\n  shallowReadonly\n};\n","import { compareValue, isArray, isObject } from \"@vue/shared/src\";\nimport { track, trigger } from \"./effect\";\nimport { TrackOpsEnum, TriggerOpsEnum } from \"./enum\";\nimport { reactive } from \"./reactive\";\n\n/**\n * ref用于基本类型的代理 [number string boolean null undefined]\n * - 可以包装object类型，但是 对象类型包装最终使用的是 reactive 包装。\n * - 类-RefImpl内部实现 会被转成es5的 Object.definedProperty() 代理实现\n * @param value \n */\nfunction ref(value: any) {\n  return createRef(value);\n}\n\n/** 浅层ref包装 */\nfunction shallowRef(value: any) {\n  return createRef(value, true)\n}\n\n\n/**\n * 创建普通包装\n * @param rawValue 原始值\n * @param shallow 是否浅层包装\n * @returns \n */\nfunction createRef(rawValue: any, shallow=false) {\n  return new RefImpl(rawValue, shallow);\n}\n\n/** 转换器 如果ref 传入的是对象，则 会变成 转出reactive-proxy对象 */\nconst convert = (val) => isObject(val) ? reactive(val) : val;\n\n/** \n * ref类代理\n * es6-class类 => babel.js(转es5语法) => 内部使用 Object.defineProperty 代理\n */\nclass RefImpl {\n  public _value;\n  public _rawValue;\n  public _shallow\n  public __v_isRef = true;\n\n  /**\n   * @param rawValue 原始\n   * @param shallow 是否是浅层包装\n   */\n  constructor(rawValue: any, shallow=false) {\n    this._rawValue = rawValue;\n    this._shallow = shallow;\n    this._value = shallow ? rawValue : convert(rawValue);\n  }\n\n  public get value() {\n    // 收集依赖\n    track(this, TrackOpsEnum.GET, 'value');\n    return this._value;\n  }\n\n  public set value(newValue) {\n    if (!compareValue(this._value, newValue)) {\n      this._rawValue = newValue;\n      this._value = this._shallow ? newValue : convert(newValue);\n      // 触发依赖更新\n      trigger(this, TriggerOpsEnum.SET, 'value', newValue, this._rawValue);\n    }\n  }\n}\n\n/** 将普通对象key对应的value 转出代理对象 */\nclass ObjectRefImpl {\n  public _shallow\n  public __v_isRef = true;\n\n  constructor(public _object, public _key) {}\n\n  public get value() {\n    return this._object[this._key];\n  }\n\n  public set value(val) {\n    this._object[this._key] = val;\n  }\n}\n\n/**\n * 将对象的一个属性的值变成 对象\n * - 保证代理对象属性解构出来使用,依然会收集和触发的依赖。\n * @param target \n * @param key \n * @returns \n */\nfunction toRef<T extends object, K extends keyof T>(target: T, key: K) {\n  return new ObjectRefImpl(target, key);\n}\n\n/**\n * 将对象的所有属性的值变成 对象\n * - 保证代理对象属性解构出来使用,依然能收集和触发的依赖。\n * @param target \n * @returns \n */\nfunction toRefs<T extends object>(target: T) {\n  const ret = isArray(target) ? new Array[target[\"length\"]] : {};\n  for (const key in target) {\n    ret[key] = toRef(target, key);\n  }\n  return ret;\n}\n\nexport {\n  ref,\n  shallowRef,\n  toRef,\n  toRefs\n}\n"],"names":[],"mappings":"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"}