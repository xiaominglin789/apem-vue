{"version":3,"file":"reactivity.cjs.js","sources":["../../shared/src/index.ts","../src/enum.ts","../src/effect.ts","../src/base-handler.ts","../src/reactive.ts"],"sourcesContent":["/** 共享模块-通用方法集合 */\n\n/**\n * 判断 是否为对象类型\n * @param target \n * @returns true: 是对象类型,  false: 非对象类型\n */\nfunction isObject(target: any): boolean {\n  return typeof target == \"object\" && target !== null;\n}\n\n/**\n * 判断 是不是数组类型\n * @param target \n * @returns true: 数组类型,  false: 非数组类型\n */\nfunction isArray(target: any): boolean {\n  return Array.isArray(target);\n}\n\n/**\n * 判断 是不是函数类型\n * @param target \n * @returns true: 函数类型,  false: 非函数类型\n */\nfunction isFunction(target: any): boolean {\n  return typeof target == \"function\";\n}\n\n/**\n * 判断 是不是数字类型\n * @param target \n * @returns true: 数字类型,  false: 非数字类型\n */\n function isNumber(target: any): boolean {\n  return typeof target == \"number\";\n}\n\n/**\n * 判断 是不是字符串类型\n * @param target \n * @returns true: 字符串类型,  false: 非字符串类型\n */\n function isString(target: any): boolean {\n  return typeof target == \"string\";\n}\n\n/**\n * 判断 是不是整形数字类型\n * @param target \n * @returns true: 整形数字类型,  false: 非 整形数字类型\n */\nfunction isInteger(target: any): boolean {\n  return parseInt(target) + \"\" === target;\n}\n\n/**\n * target 是否有 key 这个属性\n * @param target \n * @param key key键的属性\n * @returns \n */\nfunction hasOwnKey(target, key) {\n  return Object.prototype.hasOwnProperty.call(target, key);\n}\n\n/**\n * 2值比较是否相等\n * @param valA \n * @param valB \n * @returns true: 值一样的， false: 值不一样\n */\nfunction  compareValue(valA, valB) {\n  if (!valA || !valB) {\n    return false;\n  }\n\n  return valB === valA;\n}\n\nexport {\n  isObject,\n  isArray,\n  isFunction,\n  isNumber,\n  isString,\n  isInteger,\n  hasOwnKey,\n  compareValue\n};\n","/** 依赖收集的操作标识枚举 */\nexport enum TrackOpsEnum {\n  /** 取值 */\n  GET,\n}\n\n/** 触发标记枚举 */\nexport enum TriggerOpsEnum {\n  /** 添加 */\n  ADD,\n  /** 修改 */\n  SET\n}\n","import { isArray } from \"@vue/shared/src\";\nimport { TrackOpsEnum, TriggerOpsEnum } from \"./enum\";\n\n/** 配置项参数定义 */\ninterface IEffectOptions {\n  /** 是否为懒加载 */\n  lazy: boolean\n}\n\n/** effect序号标识 */\nlet effectID = 0;\n/** 当前的effect */\nlet activeEffect = null;\n/** effect存储栈 */\nconst effectStack = [];\n/**\n * 对象-属性-effects 依赖映射表\n * 结构:-WeakMap(-Map(-Set))\n * {\n *    target: {\n *      key: Set(effect1, effect2)\n *    }\n * }\n */\nconst targetEffectMap = new WeakMap();\n\n/**\n * 副作用\n * 作用: 可响应的effect, 数据变化时重新执行\n * @param fn 函数\n * @param options 配置对象:key-value\n */\nfunction effect(fn: Function, options: IEffectOptions = { lazy: false }) {\n  const effect = createReactiveEffect(fn, options);\n\n  if (!options.lazy) {\n    // 默认先执行一次\n    effect();\n  }\n\n  return effect;\n}\n\n/** 创建可响应的efflect函数 - 闭包 */\nfunction createReactiveEffect(fn: Function, options: IEffectOptions = { lazy: false }) {\n  const effect = function reactiveEffect() {\n    // 函数执行, 会取值, 会执行reactive的get方法作依赖收集\n    if (!effectStack.includes(effect)) {\n      try {\n        // console.log(\"准备执行effect内的函数\");\n        effectStack.push(effect);\n        activeEffect = effect;\n        return fn();\n      } finally {\n        // 遇到嵌套effect函数时，保证 activeEffect 正确指向\n        effectStack.pop();\n        activeEffect = effectStack[effectStack.length - 1];\n      }\n    }\n  }\n\n  // 当前effect的id标识\n  effect.id = effectID++;\n  // 标记为 响应式的effect\n  effect._isEffect = true;\n  // effect-对应的原函数\n  effect.raw = fn;\n  // effect-属性配置\n  effect.options = options;\n\n  return effect;\n}\n\n/**\n * 收集器 依赖收集函数\n * 让 某个对象的属性,收集其当前对应的effect函数。\n * @param target 目标对象\n * @param trackOpType 操作标识\n * @param key 对象的属性\n */\nfunction track(target: any, trackOpType: TrackOpsEnum, key: string) {\n  // console.log(\"收集到依赖 \", target, \" \", key);\n  // console.log(target, key, activeEffect);\n  if (null === activeEffect) {\n    return;\n  }\n\n  let depsMap = targetEffectMap.get(target);\n  if (!depsMap) {\n    // 空map,初始化taget键\n    targetEffectMap.set(target, (depsMap = new Map))\n  }\n\n  let dep = depsMap.get(key);\n  if (!dep) {\n    // 空vulue-map,初始化set\n    depsMap.set(key, (dep = new Set));\n  }\n\n  // set去重effect\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect);\n  }\n}\n\n/**\n * 触发器 effect->通知->视图更新\n * @param target 目标对象\n * @param TriggerOpsEnum 触发的类型:SET / ADD\n * @param key 哪个键\n * @param newValue 新值\n * @param oldValue 旧值\n */\nfunction trigger(target: any, triggerOpsEnum: TriggerOpsEnum, key?: string, newValue?: any, oldValue?: any) {\n  console.error(target, triggerOpsEnum, key, newValue, oldValue);\n\n  // 取出-当前目标对应的effects\n  const depsMap = targetEffectMap.get(target);\n  if (!depsMap) {\n    // 该对象无依赖, 后续不操作\n    return;\n  }\n\n  // 缓存要操作的effects, 最终一起执行。\n  const effects = new Set();\n  const add = (effs) => {\n    if (effs) {\n      effs.forEach(eff => effects.add(eff));\n    }\n  }\n\n  // 当前依赖\n  console.log(depsMap);\n  \n  // 查看是否修改的是数组的长度, 特殊处理:\n  if (key === \"length\"  && isArray(target)) {\n    console.log(\"aaaaaaaaaaa\");\n    // 数组\n    // 如果对应的长度, 有依赖收集 则需要更新\n    depsMap.forEach((dep, key) => {\n      console.log(\"key \", key, \" newValue \", newValue);\n      if (key===\"length\" || key > newValue) {\n        add(dep);\n        console.log(dep);\n      }\n    });\n  } else {\n    // 非数组\n    console.log(\"bbbbbbbbbb\");\n  }\n  \n  console.log(\"effects \", effects);\n\n  // 执行effects内的每一个函数\n  effects.forEach((ef:Function) => {\n    console.log(ef);\n    ef();\n  });\n}\n\nexport {\n  effect,\n  track,\n  trigger\n}\n","import { compareValue, hasOwnKey, isArray, isInteger, isObject } from \"@vue/shared\";\nimport { readonly, reactive } from \"./reactive\";\nimport { TrackOpsEnum, TriggerOpsEnum } from \"./enum\";\nimport { track, trigger } from \"./effect\";\n\n/**\n * getter读取\n * @param isReadonly 是否为仅读, true: readonly仅读, false: 响应式proxy\n * @param isShollaw 是否为仅作用于第一层, true: 仅作用于第一层， false: 全部嵌套属性都仅读或响应式\n * @returns \n */\nfunction createGetter(isReadonly=false, isShollaw=false) {\n  return function get(target: any, key: string, receiver: any) {\n    const result = Reflect.get(target, key, receiver);\n\n    // console.log('get key = ', key);\n\n    if (!isReadonly) {\n      // 只读的对象不做依赖收集\n      // 响应式对象-才作依赖收集\n      // 取值时, 去 执行 tract 收集 effect\n      // v3 effect =取代了=>  v2 watcher\n      // console.log(\"执行effect时会取值， 需要收集effect: \", key);\n\n      track(target, TrackOpsEnum.GET, key);\n    }\n\n    if (isShollaw) {\n      // 只有第一层是响应式属性\n      return result;\n    } \n    \n    if (isObject(result)) {\n      // 当取值时才进行代理\n      // 判断对象类型，只读属性，递归包装\n      return isReadonly ? readonly(result) : reactive(result);\n    }\n    \n    return result;\n  }\n}\n\n/**\n * setter写入(只有响应式数据才能修改)\n * @param isShollaw 是否为仅作用于第一层, true: 仅作用于第一层， false: 全部嵌套属性都响应式\n * 注意点:\n * 1.target push / pop 等修改了数组长度的操作 都会触发2次set. \n *    因为第一次是下标索引值的改变,\n *    第二次是length属性的改变, 但是 。\n * 2.如果是外部直接修改数组的length属性, 执行 trigger\n */\nfunction createSetter(isShollaw=false) {\n  return function set(target: any, key: string, newValue: any, receiver: any) {\n    const oldValue = target[key];\n\n    // 是不是数组, 判断key(下标)是不是比原数组长度小:  小-> set 修改操作, 大 添加新元素的操作\n    //   不是数值型数组, 则为 对象类型。判断 key是不是对象商的属性。是 -> 修改操作， 否 添加新属性的操作。\n    let hasKey = (isArray(target) && isInteger(key)) ? \n                  (Number(key) < target.length) : hasOwnKey(target, key);\n    \n    // 反射\n    // const result = Reflect.set(target, key, newValue, receiver);\n    \n    console.log(\"oldValue = \", oldValue, \" newValue = \", newValue);\n    \n    if (!hasKey) {\n      // 添加操作\n      // 通知effect trigger操作\n      trigger(target, TriggerOpsEnum.ADD, key, newValue);\n      \n    } else if (!compareValue(oldValue, newValue)) {\n      // 值不同,才去改。值一样,不修改\n      // 通知effect trigger操作\n      trigger(target, TriggerOpsEnum.SET, key, newValue, oldValue);\n    }\n\n    const result = Reflect.set(target, key, newValue, receiver);\n    // 返回修改的结果 true/false\n    return result;\n  }\n}\n\n\n/** 响应式对象-get */\nconst get = createGetter(false, false);\n/** 仅第一层响应式对象-get */\nconst shollawReactiveGetter = createGetter(false, true);\n/** 全部属性仅读对象-get */\nconst readonlyGetter = createGetter(true, false);\n/** 仅第一层只读对象-get */\nconst shollawReadonlyGetter = createGetter(true, true);\n/** 响应式对象-set */\nconst set = createSetter(false);\n/** 仅第一层响应式对象-set */\nconst shollawReactiveSetter = createSetter(true);\n\n\n/** reactive包装-get/set处理 */\nconst handleReactive = {\n  get,\n  set,\n}\n\n/** shallowReactive包装-get/set处理 */\nconst handleShollawReactive = {\n  get: shollawReactiveGetter,\n  set: shollawReactiveSetter\n}\n\n/** readonly包装-get/set处理 */\nconst handleReadonly = {\n  get: readonlyGetter,\n  set: (target: any, key: string) => {\n    console.warn(target, \" 所有属性都是只读, 无法修改\");\n    return false;\n  }\n}\n\n/** shallowReadonly包装-get/set处理 */\nconst handleShollawReadonly = {\n  get: shollawReadonlyGetter,\n  set: (target: any, key: string) => {\n    console.warn(target, \" 的属性:\", key, \" 属性是只读的, 无法修改\");\n    return false;\n  }\n}\n\nexport {\n  handleReactive,\n  handleShollawReactive,\n  handleReadonly,\n  handleShollawReadonly,\n}\n","import { isObject } from \"@vue/shared/src\";\nimport {\n  handleReactive,\n  handleShollawReactive,\n  handleReadonly,\n  handleShollawReadonly,\n} from \"./base-handler\";\n\n/** 响应式数据-代理对象map */\nconst reactiveProxyMap = new WeakMap();\n/** 只读数据-代理对象map */\nconst readonlyProxyMap = new WeakMap();\n\n/**\n * 根据配置创建代理对象\n * @param target 数据源\n * @param isReadonly 是否仅读\n * @param handle get/set-处理配置项\n */\nfunction createReactiveObject(target: any, isReadonly: boolean, handle: ProxyHandler<any>) {\n  /**\n   * 1.数据源是不是对象类型, 非对象的数据源直接返回\n   * 2.数据源是否已被代理过了,有代理则直接返回代理的数据\n   *   - 数据源是不是只读的, 取到对应的数据缓存\n   *   - 没有缓存,则存入缓存中、\n   */\n  if (!isObject(target)) {\n    return target;\n  }\n\n  const proxyMap = isReadonly ? readonlyProxyMap : reactiveProxyMap;\n\n  if (proxyMap.has(target)) {\n    // 有缓存, 返回缓存\n    return proxyMap.get(target);\n  }\n\n  // 无缓存, 新建, 先存缓存\n  const targetProxy = new Proxy(target, handle);\n  proxyMap.set(target, targetProxy);\n\n  return targetProxy;\n}\n\n\n/** reactive包装: 所有深度的属性都被包装成proxy */\nfunction reactive(data: any) {\n  return createReactiveObject(data, false, handleReactive);\n}\n\n/** shallowReactive包装: 只有第一层属性会被包装成proxy,其他层不会 */\nfunction shallowReactive(data: any) {\n  return createReactiveObject(data, false, handleShollawReactive);\n}\n\n/** readonly包装: 所有属性都是只读,不能改 */\nfunction readonly(data: any) {\n  return createReactiveObject(data, true, handleReadonly);\n}\n\n/**\n * shallowReadonly包装: 只有第一层属性是只读的,其他层的可读可改\n */\nfunction shallowReadonly(data: any) {\n  return createReactiveObject(data, true, handleShollawReadonly);\n}\n\nexport {\n  reactive,\n  shallowReactive,\n  readonly,\n  shallowReadonly\n};\n"],"names":[],"mappings":"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"}